#include <stdio.h>
#include <stdlib.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

int Counterloop=0;
int CounterDeksia=0;
int CounterAristera=0;
int Switch_A=0;
int enableInterr;

#define ped 7

int main()
{
	
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
	sei();
	
	enableInterr=0;
	
	PORTD.DIR |= PIN1_bm;		//PIN IS OUTPUT		EUTHEIA POREIA
	PORTD.OUT |= PIN1_bm;		//LED IS OFF
	PORTD.DIR |= PIN2_bm;		//PIN IS OUTPUT		ARISTERI PERISTROFI 90°
	PORTD.OUT |= PIN2_bm;		//LED IS OFF
	PORTD.DIR |= PIN3_bm;		//PIN IS OUTPUT		DEKSIA PERISTROFI 90°
	PORTD.OUT |= PIN3_bm;		//LED IS OFF
	PORTD.DIR |= PIN4_bm;		//PIN IS OUTPUT		STROFI 180°
	PORTD.OUT |= PIN4_bm;		//LED IS OFF
	

	while((Switch_A == 0) && (Counterloop < 4))
	{
		enableInterr=1;
		
		ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;		//10-bit resolutio
		ADC0.CTRLA = 0x3;				//Free-Running mode enabled	//Enable ADC
		ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;		//The bit
		//Enable Debug Mode
		ADC0.DBGCTRL |= ADC_DBGRUN_bm;
		//Window Comparator Mode
		ADC0.WINHT = 0x3F;			//Set WINHT threshold
		ADC0.WINLT = 0x07;			//Set WINLT threshold
		ADC0.INTCTRL |= ADC_WCMP_bm;		//Enable Interrupts for WCM
		ADC0.CTRLE = 0x2;				//Interrupt when RESULT > WINHT
		
		_delay_ms(2);
		ADC0.COMMAND |= ADC_STCONV_bm;
		_delay_ms(2);
		
		while((Counterloop < 4) && (ADC0.RES <= ADC0.WINHT) && (Switch_A==0))
		{
			enableInterr=1;
			
			//initialize the ADC for SINGLE CONVERSION MODE
			ADC0.CTRLA =0x1;		//enable ADC SINGLE CONVERSION MODE
			//Window Comparator Mode
			ADC0.CTRLE = 0x1;		//Interrupt when RESULT < WINLT
			sei();
			
			_delay_ms(2);
			ADC0.COMMAND |= ADC_STCONV_bm;
			_delay_ms(2);
			
			while ((ADC0.RES > ADC0.WINLT) && (ADC0.RES <= ADC0.WINHT) && (Switch_A==0))
			{
				//go forth kanonikis poreias
				PORTD.OUTCLR = PIN1_bm; //LED eutheia IS ON
				
				enableInterr=1;
			}
			
		}
	}
	while((Switch_A ==1) && ((CounterDeksia !=0) || (CounterAristera != -1)))
	{
		PORTD.OUT |= PIN1_bm;	//LED IS OFF  EUTHEIA POREIA
		
		//ROTATE 180° ANASTROFI
		
		TCA0.SINGLE.CNT = 0; //clear counter
		TCA0.SINGLE.CTRLB =0; //Normal Mode(TCA_SINGLE_WGMODE_NORMAL_gc σελ 207)
		TCA0.SINGLE.CMP0 = ped; //When reaches this value ->interrupt CLOCK FREQUENCY/1024
		TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc; //(0x7<<1 σελ 224)
		TCA0.SINGLE.CTRLA |= 1; //ENABLE
		while (TCA0.SINGLE.INTFLAGS !=  0x70) //CHECK IF CNT=CMP0
		{
			PORTD.OUTCLR = PIN2_bm;		//LED IS ON ARISTERI PERISTROFI 90°
			PORTD.OUTCLR =PIN3_bm;		//LED IS ON DEKSIA PERISTROFI 90°
			PORTD.OUTCLR =PIN1_bm;		//LED IS ON EUTHEIA
			_delay_ms(9);
		}

		PORTD.OUT |= PIN2_bm;		//LED IS OFF ARISTERI PERISTROFI 90°
		PORTD.OUT |=PIN3_bm;			//LED IS OFF DEKSIA PERISTROFI 90°
		PORTD.OUT |= PIN1_bm;		//LED IS OFF EUTHEIA
		
		while((CounterDeksia !=0) || (CounterAristera != -1))
		{
			
			enableInterr=1;
			
			ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;		//10-bit resolutio
			ADC0.CTRLA = 0x3;			//Free-Running mode enabled	//Enable ADC
			ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;		//The bit
			//Enable Debug Mode
			ADC0.DBGCTRL |= ADC_DBGRUN_bm;
			//Window Comparator Mode
			ADC0.WINHT = 0x3F;			//Set WINHT threshold
			ADC0.WINLT = 0x07;			//Set WINLT threshold
			ADC0.INTCTRL |= ADC_WCMP_bm;		//Enable Interrupts for WCM
			ADC0.CTRLE = 0x2;				//Interrupt when RESULT > WINHT
			
			_delay_ms(2);
			ADC0.COMMAND |= ADC_STCONV_bm;
			_delay_ms(2);
			
			while(((CounterDeksia !=0) || (CounterAristera != -1)) && (ADC0.RES <= ADC0.WINHT))
			{
				enableInterr=1;
				
				//initialize the ADC for SINGLE CONVERSION MODE
				ADC0.CTRLA =0x1;		//enable ADC SINGLE CONVERSION MODE
				//Window Comparator Mode
				ADC0.CTRLE = 0x1;		//Interrupt when RESULT < WINLT
				sei();
				
				_delay_ms(2);
				ADC0.COMMAND |= ADC_STCONV_bm;
				_delay_ms(2);
				
				while ((ADC0.RES > ADC0.WINLT) && (ADC0.RES <= ADC0.WINHT))
				{
					//go forth ANAPODIS POREIAS
					PORTD.OUTCLR = PIN1_bm; //LED eutheia IS ON
					
					enableInterr=1;
				}
				
			}
		}
	}
	if((Switch_A==1) && (CounterDeksia ==0) && (CounterAristera == 0))
	{
		//H ANTISTROFH LEITOURGEIA EPESTREPSE STIN AFETHRIA
		_delay_ms(2);
		
	}
	if((Switch_A==0) && (Counterloop==4))
	{
		//H KANONIKH LEITOURGEIA EPESTREPSE STIN AFETHRIA
		_delay_ms(2);
	}
}

ISR(ADC0_WCOMP_vect)
{
	ADC0.CTRLA = 0x0; //mhdenizoume ton ADC0(enable,freerun) oste na mhn pairnei allages tou res mesa sto subroutine
	
	//RESET  ADC0.FLAG
	
	int intflags = ADC0.INTFLAGS;
	ADC0.INTFLAGS = intflags;
	
	//RESET TIMER FLAG
	
	_delay_ms(1);
	intflags=TCA0.SINGLE.INTFLAGS;
	TCA0.SINGLE.INTFLAGS=intflags;
	_delay_ms(1);
	
	
	if ((Switch_A==0) && (enableInterr==1))
	{
		if (ADC0.RES >= ADC0.WINHT  && (enableInterr==1))
		{
			//go right	KANONIKIS POREIAS
			PORTD.OUT |= PIN1_bm;		//LED IS OFF  EUTHEIA POREIA

			//DEKSIA PERISTROFI 90°

			TCA0.SINGLE.CNT = 0; //clear counter
			TCA0.SINGLE.CTRLB =0; //Normal Mode(TCA_SINGLE_WGMODE_NORMAL_gc σελ 207)
			TCA0.SINGLE.CMP0 = ped; //When reaches this value ->interrupt CLOCK FREQUENCY/1024
			TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc; //(0x7<<1 σελ 224)
			TCA0.SINGLE.CTRLA |= 1; //ENABLE
			while (TCA0.SINGLE.INTFLAGS !=  0x70) //CHECK IF CNT=CMP0
			{
				PORTD.OUTCLR = PIN3_bm;	//LED IS ON DEKSIA PERISTROFI 90°
				_delay_ms(9);
			}
			PORTD.OUT |= PIN3_bm;		//LED IS OFF DEKSIA PERISTROFI 90°
			
			CounterDeksia=CounterDeksia+1;
			Counterloop=CounterAristera-CounterDeksia;
			enableInterr=0;
			
		}
		
		if (ADC0.RES <= ADC0.WINLT  && (enableInterr==1))
		{
			//go left KANONIKIS POREIAS
			PORTD.OUT |= PIN1_bm;		//LED IS OFF  EUTHEIA POREIA

			//ARISTERI PERISTROFI 90°

			TCA0.SINGLE.CNT = 0; //clear counter
			TCA0.SINGLE.CTRLB =0; //Normal Mode(TCA_SINGLE_WGMODE_NORMAL_gc σελ 207)
			TCA0.SINGLE.CMP0 = ped; //When reaches this value ->interrupt CLOCK FREQUENCY/1024
			TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc; //(0x7<<1 σελ 224)
			TCA0.SINGLE.CTRLA |= 1; //ENABLE
			while (TCA0.SINGLE.INTFLAGS !=  0x70) //CHECK IF CNT=CMP0
			{
				PORTD.OUTCLR = PIN2_bm;	//LED IS ON ARISTERI PERISTROFI 90°
				_delay_ms(9);
			}
			PORTD.OUT |= PIN2_bm;		//LED IS OFF ARISTERI PERISTROFI 90°
			
			CounterAristera=CounterAristera + 1;
			Counterloop=CounterAristera-CounterDeksia;
			enableInterr=0;
		}
	}

	if ((Switch_A==1) && (enableInterr==1) )
	{
		if (ADC0.RES > ADC0.WINHT && (enableInterr==1))
		{
			//go left ANAPODIS POREIAS
			
			PORTD.OUT |= PIN1_bm;		//LED IS OFF  EUTHEIA POREIA

			//ARISTERI PERISTROFI 90°

			TCA0.SINGLE.CNT = 0; //clear counter
			TCA0.SINGLE.CTRLB =0; //Normal Mode(TCA_SINGLE_WGMODE_NORMAL_gc σελ 207)
			TCA0.SINGLE.CMP0 = ped; //When reaches this value ->interrupt CLOCK FREQUENCY/1024
			TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc; //(0x7<<1 σελ 224)
			TCA0.SINGLE.CTRLA |= 1; //ENABLE
			while (TCA0.SINGLE.INTFLAGS !=  0x70) //CHECK IF CNT=CMP0
			{
				PORTD.OUTCLR = PIN2_bm;	//LED IS ON ARISTERI PERISTROFI 90°
				_delay_ms(9);
			}
			PORTD.OUT |= PIN2_bm;		//LED IS OFF ARISTERI PERISTROFI 90°
			
			CounterDeksia=CounterDeksia-1;
			Counterloop=CounterAristera-CounterDeksia;
			enableInterr=0;
		}
		if (ADC0.RES < ADC0.WINLT && (enableInterr==1))
		{
			//go right ANAPODIS POREIAS
			
			PORTD.OUT |= PIN1_bm;	//LED IS OFF  EUTHEIA POREIA

			//DEKSIA PERISTROFI 90°

			TCA0.SINGLE.CNT = 0; //clear counter
			TCA0.SINGLE.CTRLB =0; //Normal Mode(TCA_SINGLE_WGMODE_NORMAL_gc σελ 207)
			TCA0.SINGLE.CMP0 = ped; //When reaches this value ->interrupt CLOCK FREQUENCY/1024
			TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc; //(0x7<<1 σελ 224)
			TCA0.SINGLE.CTRLA |= 1; //ENABLE
			while (TCA0.SINGLE.INTFLAGS !=  0x70) //CHECK IF CNT=CMP0
			{
				PORTD.OUTCLR = PIN3_bm;	//LED IS ON DEKSIA PERISTROFI 90°
				_delay_ms(9);
			}
			PORTD.OUT |= PIN3_bm;		//LED IS OFF DEKSIA PERISTROFI 90°
			
			CounterAristera=CounterAristera - 1;
			Counterloop=CounterAristera-CounterDeksia;
			enableInterr=0;
		}
	}
	
}

ISR(PORTF_PORT_vect)	//INTERRUPT Subroutine
{
	//clear the interrupt flag
	
	int flagKOUMPIOU2 = PORTF.INTFLAGS;
	PORTF.INTFLAGS = flagKOUMPIOU2;
	
	Switch_A=1;		//set interKOUMPIOU=1 efoson patithike to koumpi pezwn
}
